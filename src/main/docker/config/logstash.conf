input {
  udp {
    port => "5000"
    type => "syslog"
    codec => "plain"
  }
  tcp {
    port => "5000"
    type => "syslog"
    codec => "plain"
  }
  http {
    port => "5001"
    codec => "plain"
  }
}

filter {
  if [message] =~ "\tat" {
    grok {
      match => ["message", "^(\tat)"]
      add_tag => ["stacktrace"]
    }
  }

  grok {
    match => [ "message",
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) %{LOGLEVEL:level} %{NUMBER:pid} --- \[(?<thread>(.*))\] (?<class>[A-Za-z0-9.]*\.[A-Za-z0-9#_]+)\s*:\s+(?<logmessage>.*)",
               "message",
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\s+(?<logmessage>.*)"
             ]
  }

  date {
    match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss.SSS" ]
  }

  mutate {
    add_field => { "app_name" => "${APP_NAME}" }
  }

  mutate {
    add_field => { "profile_name" => "${APP_PROFILE}" }
  }

  mutate {
    add_field => { "instance_name" => "${APP_NAME}-${APP_PROFILE}-%{host}" }
  }

  mutate {
    add_field => { "[@metadata][LOGSTASH_DEBUG]" => "${LOGSTASH_DEBUG:false}" }
  }

  if "_grokparsefailure" in [tags] {
      mutate {
        add_field => { "raw_message" => "%{message}" }
      }

      mutate {
        remove_field => ["message"]
      }
  } else {
    mutate {
      remove_field => ["message"]
    }

    mutate {
      add_field => { "message" => "%{logmessage}" }
    }

    mutate {
      remove_field => ["logmessage"]
    }
  }

}

output {
  stdout {}
}
